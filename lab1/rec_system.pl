:- consult('animals_db.pl').

ввод(Строка) :-
    split_string(Строка, " ", "", Части),
    Части = [Владелец, Животное | Свойства],
    обработать_животное(Владелец, Животное, Свойства).

обработать_часть(Часть) :-
    split_string(Часть, " ", "", [Владелец, Животное | Свойства]),
    обработать_животное(Владелец, Животное, Свойства).

обработать_животное(Владелец, Животное, Свойства) :-
    assertz(животное(Животное)),
    assertz(владелец(Животное, Владелец)),
    format('Добавлено животное: ~w с владельцем: ~w~n', [Животное, Владелец]),
    добавить_свойства(Животное, Свойства).

добавить_свойства(_, []) :- !. 
добавить_свойства(Животное, [Свойство|Остальные]) :-
    atom_string(АтомСвойство, Свойство),
    Predicate =.. [АтомСвойство, Животное],
    assertz(Predicate),
    добавить_свойства(Животное, Остальные).

% Рекомендация хода: хищник игрока проверяет, кого может съесть среди животных противника.
рекомендация_хода(Хищник) :-
    владелец(Хищник, Владелец),
    forall((животное(Жертва), владелец(Жертва, Противник), Противник \= Владелец),
        (может_съесть(Хищник, Жертва) ->
            format('Ваше животное ~w съело животное противника ~w~n', [Хищник, Жертва]))
    ).

% Добавляет указанное свойство к животному
добавить_свойство(Животное, Свойство) :-
    (Свойство = остроеЗрение -> assertz(остроеЗрение(Животное));
     Свойство = камуфляж -> assertz(камуфляж(Животное));
     Свойство = большое -> assertz(большое(Животное));
     Свойство = норное -> assertz(норное(Животное));
     Свойство = быстрое -> assertz(быстрое(Животное));
     Свойство = жировой_запас -> assertz(жировой_запас(Животное));
     Свойство = водоплавающее -> assertz(водоплавающее(Животное));
     Свойство = ядовитое -> assertz(ядовитое(Животное));
     Свойство = хищник -> assertz(хищник(Животное));
     Свойство = падальщик -> assertz(падальщик(Животное));
     Свойство = отбрасываетХвост -> assertz(отбрасываетХвост(Животное))),
    format('Добавлено свойство ~w для животного ~w~n', [Свойство, Животное]).