% объявление динамических предикатов
% Эти предикаты могут изменяться во время выполнения программы
:- dynamic накормлено/1, вымирает/1, падальщик/1, жировой_запас/1, животное/1, хищник/1, водоплавающее/1, ядовитое/1, сотрудничество/1, требует_дополнительного_корма/1, остроеЗрение/1, камуфляж/1, большое/1, норное/1, быстрое/1, отбрасываетХвост/1,владелец/2.

% Эта фаза создает начальные условия, добавляя животных и их свойства в базу данных
фаза_рождения :- 
    % Добавляем животных
    assertz(животное(животное1)),
    assertz(животное(животное2)),
    assertz(животное(животное3)),
    assertz(животное(животное4)),
    assertz(животное(животное5)),
    assertz(животное(животное6)),
    assertz(животное(животное7)),
    assertz(животное(животное8)),

    % Назначаем хищников
    assertz(хищник(животное1)),
    assertz(хищник(животное6)),
    
    % Назначаем водоплавающих
    assertz(водоплавающее(животное1)),
    assertz(водоплавающее(животное3)),
    assertz(водоплавающее(животное7)),
    
    % Назначаем ядовитых
    assertz(ядовитое(животное3)),
    assertz(ядовитое(животное5)),
    
    % Назначаем падальщиков
    assertz(падальщик(животное8)),
    assertz(падальщик(животное4)),
    
    % Добавляем животных с жировым запасом
    assertz(жировой_запас(животное6)),
    assertz(жировой_запас(животное7)),
    assertz(жировой_запас(животное8)),
    
    % Устанавливаем сотрудничество между животными
    assertz(сотрудничество(животное1, животное2)),
    assertz(сотрудничество(животное2, животное3)),
    
    % Прочие свойства животных
    assertz(остроеЗрение(животное1)),
    assertz(камуфляж(животное5)),
    assertz(большое(животное1)),
    assertz(норное(животное2)),
    assertz(быстрое(животное3)),
    assertz(отбрасываетХвост(животное4)),
    
    % Животные, требующие дополнительного корма
    assertz(требует_дополнительного_корма(животное3, паразит)),
    assertz(требует_дополнительного_корма(животное4, большое)).


% Проверка, может ли животное игрока съесть животное противника с учетом скрытных свойств.
может_съесть(Хищник, Жертва) :-
    % Если у жертвы норное, быстрое или отбрасывает хвост, хищник не может её съесть.
    (норное(Жертва) ; быстрое(Жертва) ; отбрасываетХвост(Жертва)),
    format('Ваше животное ~w не может съесть животное противника ~w: жертва обладает свойством скрытное (норное/быстрое/отбрасывает хвост)~n', [Хищник, Жертва]),
    !, fail.
может_съесть(Хищник, Жертва) :-
    % Если у жертвы камуфляж, хищник может её съесть только при наличии острого зрения.
    камуфляж(Жертва),
    \+ остроеЗрение(Хищник),
    format('Ваше животное ~w не может съесть животное противника ~w: жертва обладает камуфляжем, требуется свойство остроеЗрение~n', [Хищник, Жертва]),
    !, fail.
может_съесть(Хищник, Жертва) :-
    % Если у жертвы большое, хищник может её съесть только если у него тоже есть большое.
    большое(Жертва),
    \+ большое(Хищник),
    format('Ваше животное ~w не может съесть животное противника ~w: жертва большая, требуется свойство большое~n', [Хищник, Жертва]),
    !, fail.
может_съесть(Хищник, Жертва) :-
    % Если прошли все проверки, то можно съесть.
    ест(Хищник, Жертва).

% Определяет правило охоты хищников на жертв.
% Хищник может съесть жертву, если они обитают в одной среде, не являются одним и тем же животным
ест(Хищник, Жертва) :-
    хищник(Хищник),
    животное(Жертва),
    в_одной_среде(Хищник, Жертва),
    Хищник \= Жертва,
    \+ вымирает(Жертва),
    \+ накормлено(Хищник),
    assertz(накормлено(Хищник)),
    assertz(вымирает(Жертва)),
    (вымирает_если_ядовитое(Хищник, Жертва) ; true),
    (накормлено_если_падальщик ; true).

% Определяет, обитают ли два животных в одной среде (водоплавающие или неводоплавающие)
в_одной_среде(А, Б) :- 
    водоплавающее(А), 
    водоплавающее(Б).
в_одной_среде(А, Б) :- 
    \+ водоплавающее(А), 
    \+ водоплавающее(Б).

% Если жертва ядовита, хищник умирает после её поедания
вымирает_если_ядовитое(Хищник, Жертва) :- 
    ядовитое(Жертва), 
    assertz(вымирает(Хищник)).

% Все падальщики автоматически кормятся, если в игре есть падшие животные
накормлено_если_падальщик :- 
    падальщик(Животное), 
    assertz(накормлено(Животное)), 
    fail.

% Фаза старта очищает базу данных от предыдущих состояний
фаза_старта :- 
    retractall(животное(_)),
    retractall(накормлено(_)),
    retractall(вымирает(_)),
    retractall(жировой_запас(_)),
    retractall(хищник(_)),
    retractall(водоплавающее(_)),
    retractall(падальщик(_)),
    retractall(ядовитое(_)).

% Животные, которые не были накормлены и не имеют жирового запаса, вымирают
фаза_вымирания :- 
    животное(Животное),
    \+ жировой_запас(Животное),
    \+ накормлено(Животное), 
    assertz(вымирает(Животное)),
    fail.
фаза_вымирания.

% Очищает игру от вымерших животных
фаза_очистки :- 
    вымирает(Животное),
    retractall(животное(Животное)),
    fail.
фаза_очистки.

% Выводит список всех животных и их характеристики
вывести_всех_животных :- 
    животное(Животное),
    format('Животное: ~w~n', [Животное]),
    (владелец(Животное, Владелец) -> format('  Владелец: ~w~n', [Владелец]) ; true),
    (накормлено(Животное) -> format('  Накормлено~n') ; true),
    (вымирает(Животное) -> format('  Вымирает~n') ; true),
    (жировой_запас(Животное) -> format('  Жировой запас: есть~n') ; true),
    (хищник(Животное) -> format('  Хищник~n') ; true),
    (водоплавающее(Животное) -> format('  Водоплавающее~n') ; true),
    (ядовитое(Животное) -> format('  Ядовитое~n') ; true),
    (падальщик(Животное) -> format('  Падальщик~n') ; true),
    (остроеЗрение(Животное) -> format('  Острое зрение~n') ; true),
    (камуфляж(Животное) -> format('  Камуфляж~n') ; true),
    (большое(Животное) -> format('  Большое~n') ; true),
    (норное(Животное) -> format('  Норное~n') ; true),
    (быстрое(Животное) -> format('  Быстрое~n') ; true),
    (отбрасываетХвост(Животное) -> format('  Отбрасывает хвост~n') ; true),
    fail.
вывести_всех_животных.

