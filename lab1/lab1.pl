% объявление динамических предикатов
% Эти предикаты могут изменяться во время выполнения программы
:- dynamic накормлено/1, вымирает/1, падальщик/1, жировой_запас/1, животное/1, хищник/1, водоплавающее/1, ядовитое/1.

% фаза_рождения/0
% Эта фаза создает начальные условия, добавляя животных и их свойства в базу данных
фаза_рождения :- 
    % Добавляем животных
    assertz(животное(животное1)),
    assertz(животное(животное2)),
    assertz(животное(животное3)),
    assertz(животное(животное4)),
    assertz(животное(животное5)),
    assertz(животное(животное6)),
    assertz(животное(животное7)),
    assertz(животное(животное8)),

    % Назначаем хищников
    assertz(хищник(животное1)),
    assertz(хищник(животное6)),
    
    % Назначаем водоплавающих
    assertz(водоплавающее(животное1)),
    assertz(водоплавающее(животное3)),
    assertz(водоплавающее(животное7)),
    
    % Назначаем ядовитых
    assertz(ядовитое(животное3)),
    assertz(ядовитое(животное5)),
    
    % Назначаем падальщиков
    assertz(падальщик(животное8)),
    assertz(падальщик(животное4)),
    
    % Добавляем животных с жировым запасом
    assertz(жировой_запас(животное6)),
    assertz(жировой_запас(животное7)),
    assertz(жировой_запас(животное8)),
    
    % Устанавливаем сотрудничество между животными
    assertz(сотрудничество(животное1, животное2)),
    assertz(сотрудничество(животное2, животное3)),
    
    % Прочие свойства животных
    assertz(приспособленное(животное1, остроеЗрение)),
    assertz(скрытное(животное5, камуфляж)),
    assertz(скрытное(животное1, большое)),
    assertz(скрытное(животное2, норное)),
    assertz(скрытное(животное3, быстрое)),
    assertz(скрытное(животное4, отбрасываетХвост)),
    
    % Животные, требующие дополнительного корма
    assertz(требует_дополнительного_корма(животное3, паразит)),
    assertz(требует_дополнительного_корма(животное4, большое)).

% ест/2
% Определяет правило охоты хищников на жертв.
% Хищник может съесть жертву, если они обитают в одной среде, не являются одним и тем же животным
ест(Хищник, Жертва) :-
    хищник(Хищник),
    животное(Жертва),
    в_одной_среде(Хищник, Жертва),
    Хищник \= Жертва,
    assertz(накормлено(Хищник)),
    assertz(вымирает(Жертва)),
    (вымирает_если_ядовитое(Хищник, Жертва) ; true),
    (накормлено_если_падальщик ; true).

% в_одной_среде/2
% Определяет, обитают ли два животных в одной среде (водоплавающие или неводоплавающие)
в_одной_среде(А, Б) :- 
    водоплавающее(А), 
    водоплавающее(Б).
в_одной_среде(А, Б) :- 
    \+ водоплавающее(А), 
    \+ водоплавающее(Б).

% вымирает_если_ядовитое/2
% Если жертва ядовита, хищник умирает после её поедания
вымирает_если_ядовитое(Хищник, Жертва) :- 
    ядовитое(Жертва), 
    assertz(вымирает(Хищник)).

% накормлено_если_падальщик/0
% Все падальщики автоматически кормятся, если в игре есть падшие животные
накормлено_если_падальщик :- 
    падальщик(Животное), 
    assertz(накормлено(Животное)), 
    fail.

% фаза_старта/0
% Фаза старта очищает базу данных от предыдущих состояний
фаза_старта :- 
    retractall(животное(_)),
    retractall(накормлено(_)),
    retractall(вымирает(_)),
    retractall(жировой_запас(_)),
    retractall(хищник(_)),
    retractall(водоплавающее(_)),
    retractall(падальщик(_)),
    retractall(ядовитое(_)).

% фаза_вымирания/0
% Животные, которые не были накормлены и не имеют жирового запаса, вымирают
фаза_вымирания :- 
    животное(Животное),
    \+ жировой_запас(Животное),
    \+ накормлено(Животное), 
    assertz(вымирает(Животное)),
    fail.
фаза_вымирания.

% фаза_очистки/0
% Очищает игру от вымерших животных
фаза_очистки :- 
    вымирает(Животное),
    retractall(животное(Животное)),
    fail.
фаза_очистки.

% вывести_всех_животных/0
% Выводит список всех животных и их характеристики
вывести_всех_животных :- 
    животное(Животное),
    format('Животное: ~w~n', [Животное]),
    (накормлено(Животное) -> format('  Накормлено: да~n') ; true),
    (вымирает(Животное) -> format('  Вымирает: да~n') ; true),
    (жировой_запас(Животное) -> format('  Жировой запас: есть~n') ; true),
    (хищник(Животное) -> format('  Хищник: да~n') ; true),
    (водоплавающее(Животное) -> format('  Водоплавающее: да~n') ; true),
    (ядовитое(Животное) -> format('  Ядовитое: да~n') ; true),
    (падальщик(Животное) -> format('  Падальщик: да~n') ; true),
    fail.
вывести_всех_животных.
